--local actions = require('telescope.actions')

-- Ignore files bigger than a threshold
local previewers = require('telescope.previewers')
local new_maker = function(filepath, bufnr, opts)
  opts = opts or {}

  filepath = vim.fn.expand(filepath)
  vim.loop.fs_stat(filepath, function(_, stat)
    if not stat then return end
    --10MB: 10000000
    if stat.size > 5000000 then
      return
    else
      previewers.buffer_previewer_maker(filepath, bufnr, opts)
    end
  end)
end

-- Dont preview binaries
local Job = require('plenary.job')
local new_maker = function(filepath, bufnr, opts)
  filepath = vim.fn.expand(filepath)
  Job:new({
    command = 'file',
    args = { '--mime-type', '-b', filepath },
    on_exit = function(j)
      local mime_type = vim.split(j:result()[1], '/')[1]
      if mime_type == "text" then
        previewers.buffer_previewer_maker(filepath, bufnr, opts)
      else
        -- maybe we want to write something to the buffer here
        vim.schedule(function()
          vim.api.nvim_buf_set_lines(bufnr, 0, -1, false, { 'BINARY' })
        end)
      end
    end
  }):sync()
end

require('telescope').setup{
  defaults = {
    buffer_previewer_maker = new_maker,
    file_ignore_patterns = {
        ".mp4", ".webm", ".mkv", ".avi", ".m4a",
        ".mp3", ".dll", ".db", ".exe", ".ogg",
        ".png", ".jpg", ".jpeg", ".pdf",
        ".7z", ".rar", ".tar", ".zip",
        ".doc", ".docx", ".gif",
        "node_modules", ".cache", ".icons",
        ".undodir", ".PlayOnLinux", 
        "Calibre Library", "Games", "PlayOnLinux's virtual drives", 
        "snap", "Videos"
    },
    find_command = { "rg", "--hidden", "--ignore-case"},
    -- Hidden files and directories can be searched with --hidden
    prompt_prefix = "üîç",
    path_display = {"smart"},
    layout_config = {
      vertical = { width = 0.9 },
      horizontal = { 
                  width = 0.9,
                  preview_cutoff = 0
      }
    },
    mappings = {
      -- i = {
        -- map actions.which_key to <C-h> (default: <C-/>)
        -- actions.which_key shows the mappings for your picker,
        -- e.g. git_{create, delete, ...}_branch for the git_branches picker
        --["<C-h>"] = "which_key",
        -- Mapping <Esc> to quit in insert mode
        --["<esc>"] = actions.close
      -- }
    }
  },
  pickers = {
    -- Default configuration for builtin pickers goes here:
    -- picker_name = {
    --   picker_config_key = value,
    --   ...
    -- }
    -- Now the picker_config_key will be applied every time you call this
    -- builtin picker
  },
  --extensions = {
    -- extension_name = {
    --   extension_config_key = value,
    -- }
    -- take a look at the readme of the extension you want to configure
  --}
}

-- get fzf loaded after setup function
require('telescope').load_extension('fzf')
require('telescope').load_extension('projects')
--require('telescope').load_extension('fzy_native')
